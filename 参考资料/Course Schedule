207. Course Schedule
题目描述和难度
题目描述：
现在你总共有 n 门课需要选，记为 0 到 n-1。

在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]

给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？

示例 1:

输入: 2, [[1,0]] 
输出: true
解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。
示例 2:

输入: 2, [[1,0],[0,1]]
输出: false
解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。
说明:

输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵。详情请参见图的表示法。
你可以假定输入的先决条件中没有重复的边。
提示:

这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。
通过 DFS 进行拓扑排序 - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。
拓扑排序也可以通过 BFS 完成。

题目难度：中等。
英文网址：207. Course Schedule 。
中文网址：207. 课程表 。
思路分析
求解关键：本题考查了拓扑排序，可以说是一道拓扑排序的模板题，弄清楚了拓扑排序以后，其实写出代码是很轻松的。

参考解答
参考解答1
import java.util.HashSet;

public class Solution {
    /**
     * @param numCourses    总共有多少门课程
     * @param prerequisites [[1,0],[1,2],[0,1]] 应该返回 false
     * @return
     */
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (numCourses == 0) {
            return false;
        }
        // 邻接表，使用 Set 是为了去重
        HashSet<Integer>[] table = new HashSet[numCourses];
        // 初始化邻接表
        for (int i = 0; i < numCourses; i++) {
            table[i] = new HashSet<>();
        }
        // 填写邻接表，有多少条有向边，注意：后面的结点指向前面的结点
        // 添加入度列表，列表的个数与节点个数一致
        // 填写邻接表的时候，把入度表也填了
        int[] inDegree = new int[numCourses];
        for (int[] p : prerequisites) {
            table[p[1]].add(p[0]);
            inDegree[p[0]]++;
        }
        // 遍历入度矩阵
        for (int i = 0; i < numCourses; i++) {
            // 每一轮都先找入度为 0 的结点，将它设置成 -1 表示已经从邻接表中删除
            int j = 0;
            while (j < numCourses && inDegree[j] != 0) {
                j++;
            }
            // 在遍历的过程中，没有找到入度为 0 的结点，说明存在环，课程学习任务就无法完成
            // 所以返回 false
            if (j == numCourses) {
                return false;
            }
            // 找到了一个入度为 0 的结点
            // 1、将它删除，即设置为 -1
            // 2、将它指向的结点的入度全部减一
            inDegree[j] = -1;
            for (int n : table[j]) {
                inDegree[n]--;
            }
        }
        return true;
    }
}
参考解答2
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 * 该方法还存储了拓扑排序的结果
 *
 * @author liwei
 * @date 18/6/24 下午12:20
 */
public class Solution4 {

    /**
     * @param numCourses
     * @param prerequisites
     * @return
     */
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (numCourses <= 0) {
            return false;
        }
        int plen = prerequisites.length;
        if (plen == 0) {
            return true;
        }
        int[] inDegree = new int[numCourses];
        for (int[] p : prerequisites) {
            inDegree[p[0]]++;
        }
        LinkedList<Integer> queue = new LinkedList<>();
        // 首先加入入度为 0 的结点
        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                queue.addLast(i);
            }
        }
        // 拓扑排序的结果
        List<Integer> res = new ArrayList<>();
        while (!queue.isEmpty()) {
            Integer num = queue.removeFirst();
            res.add(num);
            // 把邻边全部遍历一下
            for (int[] p : prerequisites) {
                if (p[1] == num) {
                    inDegree[p[0]]--;
                    if (inDegree[p[0]] == 0) {
                        queue.addLast(p[0]);
                    }
                }
            }
        }
        // System.out.println("拓扑排序结果：");
        // System.out.println(res);
        return res.size() == numCourses;
    }

    public static void main(String[] args) {
        int[][] prerequisites = new int[][]{{1, 0}, {2, 6},
                {1, 7}, {6, 4}, {7, 0}, {0, 5}};
        int numCourses = 8;
        Solution4 solution4 = new Solution4();
        boolean canFinish = solution4.canFinish(numCourses, prerequisites);
        System.out.println(canFinish);
    }
}
本篇文章的地址为 https://liweiwei1419.github.io/leetcode-solution/leetcode-0207-course-schedule ，如果我的题解有错误，或者您有更好的解法，欢迎您告诉我 liweiwei1419@gmail.com 。

